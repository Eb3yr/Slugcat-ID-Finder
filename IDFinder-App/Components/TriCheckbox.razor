@namespace IDFinder_App
@inject IJSRuntime ijs
<input type="checkbox" @ref=@thisRef @bind=boundValue @bind:after=Change @attributes=AdditionalAttributes />
<script type="text/javascript">
	function setElementProperty(element, property, value) {
		element[property] = value;
	}
</script>

@code {
	private bool boundValue;
	private int _value = 0;
	private ElementReference thisRef = new();
	[Parameter]
	public EventCallback<bool> StateChanged { get; set; }
	[Parameter]
	public bool InitialValue { get; set; } = false;
	protected override void OnInitialized()
	{
		boundValue = InitialValue;
	}
	public int Value
	{
		get => _value;
		set
		{
			if (value < 0 || value > 2)
				throw new ArgumentOutOfRangeException("Value takes values of 0, 1 and 2, where 0 is false, 1 is true and 2 is indeterminate.");
			_value = value;
			if (IsIndeterminate())
				SetIndeterminate();
			else if (_value == 1)
				boundValue = true;
			else
				boundValue = false;

			StateChanged.InvokeAsync(boundValue);
		}
	}
	public bool? ValueBool
	{
		get => Value switch
		{
			0 => false,
			1 => true,
			2 => null,
			_ => throw new Exception()
		};
		set
		{
			switch (value)
			{
				case null:
					Value = 2; break;
				case true:
					Value = 1; break;
				case false:
					Value = 0; break;
			}
		}
	}
	public bool Checked
	{
		get => Value == 1;
		set => Value = value ? 1 : 0;
	}
	public StateEnum State
	{
		get => (StateEnum)Value;
		set => Value = (int)value;
	}
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }
	public bool IsIndeterminate() => _value == 2;
	private async void SetIndeterminate()
	{
		_value = 2;
		await ijs.InvokeVoidAsync("setElementProperty", thisRef, "indeterminate", true);
	}
	private void Change()
	{
		if (boundValue)
			_value = 1;
		else
			_value = 0;
	}
	public enum StateEnum
	{
		Unchecked,
		Checked,
		Indeterminate
	}
}