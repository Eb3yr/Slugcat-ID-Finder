<li @attributes="AdditionalAttributes" style="font-size: @(FontSize)px; display: flex; align-items: center; padding-top: 0px; padding-bottom: 0px;">
		<pre style="padding-right: @(FontSize)px; user-select: none;">@Label</pre>
		<input type="checkbox" @bind="Target" @bind:after="InvokeChanged"/>
		@if (ShowWeight)
		{
			<WeightBox @bind-Weight="Weight" @bind-Weight:after="InvokeChanged" FontSize="FontSize" />
		}
</li>

@code {
	// Wrapper for a checkbox + weight combo
	[Parameter]
	public bool Target { get; set; } = false;
	[Parameter]
	public string Label { get; set; } = "";
	[Parameter]
	public float Weight { get; set; } = 0f;
	[Parameter]
	public string WeightLabel { get; set; } = Consts.DefWeightLabel;
	[Parameter]
	public bool ShowWeight { get; set; } = true;
	[Parameter]
	public float FontSize { get; set; } = Consts.DefFontSize;
	[Parameter]
	public EventCallback<(bool target, float weight)> OnChanged { get; set; }
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }

	private void InvokeChanged() => OnChanged.InvokeAsync((Target, Weight));
}
