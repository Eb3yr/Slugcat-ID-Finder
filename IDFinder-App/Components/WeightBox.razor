@if (RenderWeightLabel)
{
	<pre style="font-size: @(FontSize)px" @attributes="AdditionalAttributes">@WeightLabel</pre>
}
<input type="number" class="@(HideArrows ? "noscroll" : "")" @bind-value="Weight" @bind-value:after="() => WeightChanged.InvokeAsync(Weight)" style="font-size: @(FontSize)px; min-width: @(0.6 * FontSize + 22)px;" onkeypress="this.style.width = (this.value.length + 3) + 'ch'" @attributes="AdditionalAttributes" />

<!-- onkeypress js could be improved. Has an arbitrary constant that creates an increasingly large excessive width of the box, but prevents smaller length inputs from getting squashed. -->

@code {
	[Parameter]
	public float Weight { get; set; }
	[Parameter]
	public string WeightLabel { get; set; } = Consts.DefWeightLabel;
	[Parameter]
	public bool RenderWeightLabel { get; set; } = true;
	[Parameter]
	public bool HideArrows { get; set; } = false;
	[Parameter]
	public float FontSize { get; set; } = Consts.DefFontSize;
	[Parameter]
	public EventCallback<float> WeightChanged { get; set; }
	[Parameter(CaptureUnmatchedValues = true)]
	public IDictionary<string, object>? AdditionalAttributes { get; set; }
}